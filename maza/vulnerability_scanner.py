import datetime
import os
import pprint
import sys
import threading
import time

from maza.core.exploit.utils import pythonize_path

sys.path.insert(1, "E:\Development\maza")
import maza.modules as modules
from maza.network_scanner import NetworkScanner
from maza.options import Options


class VulnerabilityScanner:

    EXPLOITS = modules.__path__[0]

    def __init__(self):

        self.vulnerable_ports = {}

    def get_vulnerable_ports(self):

        self.__get_ports(VulnerabilityScanner.EXPLOITS)
        return self.vulnerable_ports

    def __get_ports(self, path):
        files = os.listdir(path)
        for file in files:
            if file != "__init__.py" and ".pyc" not in file:
                doc_path = "{}{}{}".format(path, os.sep, file)
                if os.path.isfile(doc_path):
                    with open(doc_path, "r") as doc:
                        lines = doc.readlines()
                        for line in lines:
                            if "port = OptPort" in line:
                                string = line.split(",")[0].split("(")[-1].replace("port = OptPort(", "")
                                port = int(string)
                                if port not in self.vulnerable_ports:
                                    self.vulnerable_ports.update({port: [doc_path]})
                                else:
                                    self.vulnerable_ports[port].append(doc_path)
                else:
                    self.__get_ports(doc_path)


if "__main__" == __name__:

    t1 = datetime.datetime.now()

    def class_for_name(module_name, class_name):
        # load the module, will raise ImportError if module cannot be loaded
        m = __import__(module_name, globals(), locals(), class_name)
        # get the class, will raise AttributeError if class cannot be found
        c = getattr(m, class_name)
        return c

    def run_exploit(_exploit, _ip, _port):
        try:
            _exploit = class_for_name(_exploit, "Exploit")()
            _exploit.target = _ip
            if getattr(_exploit, "check_default", None) is not None:
                result = _exploit.check_default()
                if result is None:
                    print("[N/A] Cannot asses if target: {}:{} is vulnerable to: {}.".format(_ip, _port, _exploit))
                elif result:
                    print("[OK] Target: {}:{} is vulnerable to: {}. Credentials: {}"
                          .format(_ip, _port, _exploit, result))
                else:
                    print("[X] Target: {}:{} is not vulnerable to: {}.".format(_ip, _port, _exploit))
            else:
                result = _exploit.check()
                if result is True:
                    print("[OK] Target: {}:{} is vulnerable to: {}".format(_ip, _port, _exploit))
                elif result is False:
                    print("[X] Target: {}:{} is not vulnerable to: {}".format(_ip, _port, _exploit))
                else:
                    print("[N/A] Cannot asses if target: {}:{} is vulnerable to: {}".format(_ip, _port, _exploit))
        except Exception:
            print("Failed to create Exploit: {}".format(_exploit))

    def __run_in_a_thread(func, args):

        def get_active_threads():
            active = 0
            for t in threads:
                if t.isAlive():
                    active += 1
                else:
                    threads.remove(t)
            return active

        while get_active_threads() > 500:
            time.sleep(0.5)
        thread = threading.Thread(target=func, args=args)
        thread.start()
        threads.append(thread)


    threads = []
    # vulnerable_ports = VulnerabilityScanner().get_vulnerable_ports()
    vulnerable_ports = {80: ["E:\Development\maza\maza\modules\creds\generic\http_basic_digest_default.py"]}
    # pprint.pprint(vulnerable_ports)
    # machines_with_vulnerable_open_ports = NetworkScanner().get_targets(vulnerable_ports.keys())
    machines_with_vulnerable_open_ports = {80: ["192.168.0.137"]}
    # pprint.pprint(machines_with_vulnerable_open_ports)
    for port, ips in machines_with_vulnerable_open_ports.items():
        for ip in ips:
            for exploit in vulnerable_ports[port]:

                # TODO make path construction more robust
                exploit = pythonize_path(exploit).replace(".py", "").replace(".Development.maza.", "")
                if ":" in exploit:
                    exploit = exploit.split(":")[-1]
                __run_in_a_thread(run_exploit, (exploit, ip, port))

    for t in threads:
        t.join()

    t2 = datetime.datetime.now()
    total = t2 - t1
    print('Vulnerability assessment completed in: ', total)
